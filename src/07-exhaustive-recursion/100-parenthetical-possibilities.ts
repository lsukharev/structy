/**
 * parenthetical possibilities
 *
 * Write a function, parentheticalPossibilities, that takes in a string as an
 * argument. The function should return an array containing all of the strings
 * that could be generated by expanding all parentheses of the string into its
 * possibilities.
 *
 * For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.
 *
 * - n = length of string
 * - m = length of largest parenthetical group
 * - Time: ~O(m^n)
 * - Space: ~O(m^n)
 */
export default function parentheticalPossibilities(str: string): string[] {
  if (str.length === 0) {
    return [''];
  }

  let chars: string = '';
  let remaining: string = '';

  if (str[0] === '(') {
    const end = str.indexOf(')');
    chars = str.slice(1, end);
    remaining = str.slice(end + 1);
  } else {
    chars = str[0];
    remaining = str.slice(1);
  }

  const possibilities: string[] = [];
  const suffixes = parentheticalPossibilities(remaining);

  for (let char of chars) {
    for (const suffix of suffixes) {
      possibilities.push(char + suffix);
    }
  }

  return possibilities;
}
